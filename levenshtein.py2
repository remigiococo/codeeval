import sys

def levenshtein(s1, s2):
	if s1 == s2:
		return 0
	l1 = len(s1)
	l2 = len(s2)
	if l1 == 0:
		return l2
	if l2 == 0:
		return l1
	prev = [i for i in xrange(l2+1)]
	curr = [0 for i in xrange(l2+1)]
	for i in xrange(l1):
		curr[0] = i+1
		for j in xrange(l2):
			cost = 0
			if s1[i] != s2[j]:
				cost = 1
			curr[j+1] = min(curr[j]+1, prev[j]+cost, prev[j+1]+1)
		for j in xrange(l2+1):
			prev[j] = curr[j]
	return curr[l2]

e_o_i = 0	
tc = []
wl = []
test_cases = open(sys.argv[1], 'r')
for test in test_cases:
	if( len(test) > 0 ):
		# print test
		test = test.rstrip()
		if e_o_i == 1:
			wl.append(test)
		else:
			if test == 'END OF INPUT':
				e_o_i = 1
			else:
				tc.append(test)
test_cases.close()
# print tc # debug
for s in tc:
	lcur = [s]
	lnext = []
	totl = [s]
	while True:
		for w1 in lcur:
			# print '---', w1 # debug
			for w2 in wl:
				# se prime 2 lettere diverse, posso escludere distanza = 1 (se la wordlist e' ordinata)
				if w1[0:2] != w2[0:2]: 
					continue
				if w2 not in totl:
					if levenshtein(w1,w2) == 1:
						lnext.append(w2)
						totl.append(w2)
		# lcur = []
		lcur = [x for x in lnext]
		lnext = []
		# print ll[level] # debug
		if len(lcur) == 0:
			print len(totl)
			break	
		
