import sys
import itertools

def check_points(p1, p2, p3):
	x1, y1 = p1
	x2, y2 = p2
	x3, y3 = p3
	#if (p1 == p2) and (p1 == p3):
	#	return 0
	if (p1 == p2) or (p1 == p3) or (p2 == p3):
		return 0
	if (x1 == x2) and (x1 == x3) and (y1 != y2) and (y1 != y3) and (y2 != y3):
		return 1
	if (y1 == y2) and (y1 == y3) and (x1 != x2) and (x1 != x3) and (x2 != x3):
		return 1
	if (y2-y1)*(x3-x1) == (y3-y1)*(x2-x1):
		return 1
	return 0	

def norm_abc(p1, p2):
	# ax + by + c
	x1, y1 = p1
	x2, y2 = p2
	dx = x2-x1
	dy = y2-y1
	a = dy
	b = dx
	c = -x1*dy+y1*dx
	return (a, b, c)
	
def same_line(co1, co2):
	a1, b1, c1 = co1
	a2, b2, c2 = co2
	if a1 == 0 and a2 == 0:
		if (b1*c2) == (b2*c1):
			return 1
	elif b1 == 0 and b2 == 0:
		if (a1*c2) == (a2*c1):
			return 1
	elif (a1*b2) == (a2*b1):
		if (a1*c2) == (a2*c1):
			return 1
	return 0

debug = 0	
test_cases = open(sys.argv[1], 'r')
for test in test_cases:
	if( len(test) > 0 ):
		# print test
		test = test.rstrip()
		s = test.split('|')
		pt = []
		for x in s:
			y = x.strip().split(' ')
			pt.append( (int(y[0]), int(y[1])) )
		#print pt # debug	
		lp = len(pt)
		ndx = [i for i in xrange(lp)]
		it = itertools.combinations( ndx, 3 )
		lns = []
		for x in it:
			if check_points( pt[x[0]], pt[x[1]], pt[x[2]] ) == 1:
				lns.append( norm_abc( pt[x[0]], pt[x[1]] ) ) # coeff
		if debug == 1:
			print lns
		fl = 0
		start = 0
		if len(lns) <= 1:
			fl = 1
		while fl == 0:
			l1 = lns[start]
			i = start+1
			while i < len(lns):	
				l2 = lns[i]
				if debug == 1:
					print "cmp:", l1, l2
				if same_line(l1, l2) == 1:
					if debug == 1: print "same"
					lns.remove(l2)
				else:	
					i += 1
			start += 1	
			if start > len(lns)-2:
				fl = 1
		if debug == 1:
			print lns
		print len(lns)	
test_cases.close()
