import sys
from math import *
from cmath import exp, pi, polar, log

def fft(x):
	N = len(x)
	if N <= 1: return x
	even = fft(x[0::2])
	odd =  fft(x[1::2])
	T= [exp(-2j*pi*k/N)*odd[k] for k in xrange(N/2)]
	return [even[k] + T[k] for k in xrange(N/2)] + [even[k] - T[k] for k in xrange(N/2)]
	
def cepstrum(x):
	y = fft(x)
	z = [log(yy) for yy in y] # cmath.log
	return fft(z)
	
def filt_lp(v, a):
	# 1st order lowpass IIR
	y1 = 0
	y = []
	b = 1.0-a
	for x in v:
		cur = a*y1+b*x
		y.append(cur)
		y1 = cur
	return y

def filt_hp(v, a):
	# 1st order hipass IIR
	y1 = 0
	y = []
	for x in v:
		cur = -a*y1+a*x
		y.append(cur)
		y1 = cur
	return y

def lp_filter(data, cutoff, Q, sr=20000) :
	w0 = 2.0*pi*cutoff/sr
	alpha = sin(w0)/(2.0*Q)
	b0 =(1.0 - cos(w0))/2.0
	b1 = 1.0 - cos(w0)
	b2 =(1.0 - cos(w0))/2.0
	a0 = 1.0 + alpha
	a1 =-2.0*cos(w0)
	a2 = 1.0 - alpha
	x1 = 0.0
	x2 = 0.0
	y1 = 0.0
	y2 = 0.0
	v = [] # array('h')
	n = len(data)
  #y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2] - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]
	for i in range(n) :
		x = float(data[i])
		y = (b0/a0)*x + (b1/a0)*x1 + (b2/a0)*x2 - (a1/a0)*y1 - (a2/a0)*y2
		# v.append( limit_16bit( int(y) ) )
		v.append(y)
		x2 = x1
		x1 = x
		y2 = y1		
		y1 = y
	return v

def hp_filter(data, cutoff, Q, sr=20000) :
	w0 = 2.0*pi*cutoff/sr
	alpha = sin(w0)/(2.0*Q)
	b0 =(1.0 + cos(w0))/2.0
	b1 =-(1.0 + cos(w0))
	b2 =(1.0 + cos(w0))/2.0
	a0 = 1.0 + alpha
	a1 =-2.0*cos(w0)
	a2 = 1.0 - alpha
	x1 = 0.0
	x2 = 0.0
	y1 = 0.0
	y2 = 0.0
	v = [] # array('h')
	n = len(data)
  #y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2] - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]
	for i in range(n) :
		x = float(data[i])
		y = (b0/a0)*x + (b1/a0)*x1 + (b2/a0)*x2 - (a1/a0)*y1 - (a2/a0)*y2
		# v.append( limit_16bit( int(y) ) )
		v.append(y)
		x2 = x1
		x1 = x
		y2 = y1		
		y1 = y
	return v

def sgn(x):
	if x > 0:
		return 1
	else:
		return -1

def remove_dc(v):
	avg = 0.0
	for x in v:
		avg += x
	avg /= len(v)	
	y = [ x-avg for x in v ]	
	return y
		
def find_freq(v, sr=20000.0):
	prev = v[0]
	s1 = -1
	s2 = 0
	avgf = 0
	n = 0
	for i in xrange(1, len(v)):
		x = v[i]
		if sgn(x) != sgn(prev):
			if x > 0: # zero cross direction down->up
				interp = abs( prev/(prev-x) )
				if s1 == -1: # 1st cross
					s1 = i - interp
				else:	
					s2 = i - interp
					avgf += sr/abs(s2-s1)
					s1 = s2
					n += 1
		prev = x
	return avgf/n
	
test_cases = open(sys.argv[1], 'r')
for test in test_cases:
	test = test.rstrip()
	if( len(test) > 0 ):
		# print test
		s = test.split(' ')
		x = [float(xx) for xx in s if len(xx) > 0]
		print len(x)
		# print x # debug
		y = hp_filter(x, 10.0, 1.5)
		y2 = remove_dc(y)
		y3 = lp_filter(y2, 2000.0, 1.5)
		#
		#y = hp_filter(x, 20.0, 0.5)
		#y2 = lp_filter(y, 2000.0, 2.0)
		#for yy in y2:
		#	print yy,
		#print
		ff = find_freq(y3)
		#if ff > 1000:
		#	offs = int(len(y3) * 0.2)
		#	ff = find_freq(y3[offs:])
		fr = int(ff) + 5
		fr /= 10
		fr *= 10
		print fr
test_cases.close()
