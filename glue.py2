import sys
import pprint

def calc_overlap(a,b):
	ov = 0
	la = len(a)
	lb = len(b)
	minl = min( la, lb )
	n1 = n2 = n3 = n4 = -1
	# aaaxxxxxx - bbbyyy
	# aaaxxxxxx - yyybbb
	if a in b:
		n3 = la
	if b in a:
		n4 = lb
	for i in xrange( minl, 0, -1 ):
		if a[0:i] == b[lb-i:lb]:
			n1 = i
		if a[la-i:la] == b[0:i]:
			n2 = i
		#if a[0:i] == b[0:i]:
		#	n3 = i
		#if a[la-i:la] == b[lb-i:lb]:
		#	n4 = i
		ov = max( n1, n2, n3, n4 )	
		if ov > 0:
			break
	ndx = 0	
	if ov == n1:
		ndx = 1
	elif ov == n2:
		ndx = 2
	elif ov == n3:
		ndx = 3
	elif ov == n4:
		ndx = 4
	if ov == -1:
		ov = 0
	return (ov, ndx)
	
def merge_str(a, l):
	if len(l) == 1:
		return
	# print "---", l # debug	
	maxov = 0
	ms = ""
	t = 0
	for x in l:
		if x == a:
			continue
		(n, j) = calc_overlap(a,x)
		if n > maxov:
			maxov = n
			ms = x
			t = j
	b = ""
	if t == 1: # beginning of a overlap with end of x
		b += ms + a[maxov:]
	elif t == 2:
		b += a + ms[maxov:]
	elif (t == 3) or (t == 4):
		if len(a) > len(ms):
			b += a
		else:
			b += ms
	# print maxov, t, a, "|", ms, "|", b # debug	
	if len(ms) > 0:
		l.remove(ms)
	if len(b) > 0:
		l.append(b)
	l.remove(a)	

def sort_frags(l, ol):
	start_ndx = -1
	ll = len(l)
	for i in xrange(ll):
		cnt = 0
		for j in xrange(i+1,ll):
			if l[i][1] == l[j][0]:
				cnt = 1
				break
		if cnt == 0:
			start_ndx = i
			break
	cur_ndx = start_ndx
	ol.append(l[cur_ndx])
	while len(ol) < ll:
		cnt = 0
		for i in xrange(ll):
			if i == cur_ndx:
				continue
			if l[i][1] == l[cur_ndx][0]:
				ol.append(l[i])
				cur_ndx = i
				cnt += 1
				print cur_ndx

nf = 0
tmpl = ""
sc = []
lf = 0
				
def find_sequence(cur, adj, vis, lev):
	global nf, lf, sc, tmpl
	lt = len(tmpl)
	if len( adj[cur] ) == 0:
		if lev == nf:
			return 1
		else:
			return 0
	tmp = 0
	for x in adj[cur]:
		if vis[x] == 0:
			vis[x] = 1
			y = sc[x]
			tmpl += y[lf-1:lf]	
			tmp = find_sequence(x, adj, vis, lev+1)
			if tmp == 1:
				return 1
			vis[x] = 0
			tmpl = tmpl[0:lt]
	return tmp
	
def test2():
	global nf, lf, sc, tmpl				
	test_cases = open(sys.argv[1], 'r')
	for test in test_cases:
		if( len(test) > 0 ):
			# print test
			test = test.rstrip()
			s = test.split('|')
			# print s # debug
			sc = [x for x in s if len(x) > 0]
			# print sc # debug
			sd = dict()
			for x in sc:
				sd[x] = x[1:]
			# pprint.pprint( sd	)	# debug
			nf = len(sc)	
			lf = len( sc[0] )
			al = [ [] for i in xrange(nf)]
			for i in xrange(nf):
				x = sc[i]
				for j in xrange(nf):
					if i == j:
						continue
					z = sc[j]
					zz = z[0:lf-1]
					if sd[x] == zz:
						al[i].append(j)
			# print al # debug
			cons = set()
			for i in xrange(nf):
				for j in al[i]:
					cons.add(j)
			# pprint.pprint( cons	) # debug
			startn = (set(range(nf)) - cons).pop()
			# print startn, sc[startn] # debug
			v = [0 for i in xrange(nf)]
			tmpl = sc[startn]
			v[startn] = 1
			find_sequence(startn, al, v, 1)
			print tmpl
	test_cases.close()
				
test2()
sys.exit()
				
test_cases = open(sys.argv[1], 'r')
for test in test_cases:
	if( len(test) > 0 ):
		# print test
		test = test.rstrip()
		s = test.split('|')
		# print s # debug
		while len(s) > 1:
			merge_str(s[0], s)
		print s[0]	
test_cases.close()

